name "uwv_kalman_filters"
version "0.1"

using_library "base-logging"
using_library "uwv_kalman_filters"

import_types_from "base"
import_types_from "gps_base"
import_types_from "uwv_dynamic_model"
import_types_from "uwv_kalman_filtersTypes.hpp"
import_types_from "uwv_kalman_filters/PoseUKFConfig.hpp"


task_context "VelocityProvider" do
    needs_configuration

    #******************************
    #***** Filter Properties ******
    #******************************
    # max time delta between to successive measurements in seconds
    property( "max_time_delta", "double", 2.0 )

    # Filter process noise, NaN values will be ignored and set to a healthy but likely overconfident value.
    property( "process_noise", "/uwv_kalman_filters/VelocityProcessNoise" )

    # Covariance matrix of the angular velocity measurements
    property( "cov_angular_velocity", "/base/Matrix3d" )

    # Parameters of the motion model.
    property( "model_parameters", "uwv_dynamic_model/UWVParameters" )

    # Since the pose is unknown target and source frame will be the same
    property( 'target_frame', '/std/string', 'body' )


    #******************************
    #******* Input Ports **********
    #******************************

    # Thrusters' commands
    input_port("body_efforts", "/base/commands/LinearAngular6DCommand").
        needs_reliable_connection

    # Velocity samples from a DVL, containing the velocity.
    input_port( "dvl_velocity_samples", "/base/samples/RigidBodyState" ).
	    needs_reliable_connection

    # IMU acceleration and angular velocities samples
    input_port('imu_sensor_samples', '/base/samples/IMUSensors').
	    needs_reliable_connection

    # Pressure sensor samples
    input_port('pressure_sensor_samples', '/base/samples/RigidBodyState').
            needs_reliable_connection


    #******************************
    #******* Output Ports *********
    #******************************

    # timestamped samples of the current estimated velocity of the robot
    output_port( "velocity_samples", "/base/samples/RigidBodyState" )


    #******************************
    #** Aggregator Parameters ***** 
    #******************************
    transformer do
        transformation("imu", "body")
        transformation("dvl", "body")
        transformation("pressure_sensor", "body")
            
        align_port("body_efforts", 0.01)
        align_port("dvl_velocity_samples", 0.2)
        align_port("imu_sensor_samples", 0.01)
        align_port("pressure_sensor_samples", 0.01)
        max_latency(0.05)
    end

    #******************************
    #******** Task States *********
    #******************************
    runtime_states :MISSING_TRANSFORMATION, :TRANSFORMATION_ALIGNMENT_FAILURES
    exception_states :CRITICAL_ALIGNMENT_FAILURE

    periodic 0.01
end

#
# The filter must receive accelerations and angular velocities from an inertial measurement unit,
# all other inputs are recommended but optional.
# The output of the filter is the estimated pose and velocities of the body in the navigation frame.
# Note that the internal state of the filter is the IMU in a NWU aligned navigation frame.
#
task_context "PoseEstimator" do
    needs_configuration

    #******************************
    #***** Filter Properties ******
    #******************************

    # The initial pose in the navigation frame. Position, orientation and covariaces must be valid.
    property( "initial_state", "/base/samples/RigidBodyState" )

    # Filter configuration
    property( "filter_config", "/uwv_kalman_filters/PoseUKFConfig" )

    # Filter process noise
    property( "process_noise", "/uwv_kalman_filters/PoseEstimatorProcessNoise")

    # Parameters of the motion model.
    property( "model_parameters", "/uwv_dynamic_model/UWVParameters" )

    # Covariance matrix of the linear body effort measurements
    property( "cov_body_efforts_diag", "/base/Vector3d" )

    # max time delta between to successive measurements in seconds
    property( "max_time_delta", "double", 2.0 )


    #******************************
    #******* Input Ports **********
    #******************************

    # Thrusters' status samples expressed in the body frame
    input_port("body_efforts", "/base/commands/LinearAngular6DCommand").
        needs_reliable_connection

    # Velocity samples from a DVL, containing the velocity.
    input_port( "dvl_velocity_samples", "/base/samples/RigidBodyState" ).
        needs_reliable_connection

    # IMU acceleration and angular velocities samples.
    input_port('imu_sensor_samples', '/base/samples/IMUSensors').
        needs_reliable_connection

    # Pressure sensor samples. Altitude in navigation frame.
    input_port('pressure_sensor_samples', '/base/samples/RigidBodyState').
        needs_reliable_connection

    # Position samples from an absolut source (e.g. GPS or USBL) expressed in the navigation frame
    input_port( "xy_position_samples", "/base/samples/RigidBodyState" ).
        needs_reliable_connection

    # geographic position in WGS 84
    input_port( "gps_samples", "/gps_base/Solution" ).
        needs_reliable_connection


    #******************************
    #******* Output Ports *********
    #******************************

    # timestamped samples of the current estimated pose of the robot
    output_port( "pose_samples", "/base/samples/RigidBodyState" )

    # Secondary filter states. E.g. acceleration and bias
    output_port( "secondary_states", "/uwv_kalman_filters/SecondaryStates")


    #******************************
    #** Aggregator Parameters ***** 
    #******************************
    transformer do
        transformation("imu", "body")
        transformation("dvl", "imu")
        transformation("pressure_sensor", "imu")
        transformation("gps", "imu")
        # Allows to define a navigation frame in the NWU aligned navigation frame.
        # The NWU aligned navigation frame is the internal navigation frame of the filter.
        # The origin of the frame is defined by the geographic position in the filter config.
        transformation("navigation", "navigation_nwu")

        align_port("body_efforts", 0.01)
        align_port("dvl_velocity_samples", 0.2)
        align_port("imu_sensor_samples", 0.01)
        align_port("pressure_sensor_samples", 0.01)
        align_port("xy_position_samples", 0.1)
        align_port("gps_samples", 1.0)
        max_latency(0.2)
    end

    #******************************
    #******** Task States *********
    #******************************
    runtime_states :MISSING_TRANSFORMATION, :TRANSFORMATION_ALIGNMENT_FAILURES
    exception_states :CRITICAL_ALIGNMENT_FAILURE

    periodic 0.01
end